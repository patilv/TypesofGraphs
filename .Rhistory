table(reflong$worldregion)
# Chunk 5
sourcefile<-'https://raw.githubusercontent.com/cphalpert/census-regions/master/us%20census%20bureau%20regions%20and%20divisions.csv'
usregions<-read.csv(sourcefile)
head(usregions)
reflong$usregion=usregions$Region[match(tolower(reflong$STATE),tolower(usregions$State))]
table(reflong$usregion)
# Chunk 6
reflongtop10states=reflong[reflong$STATE %in% statetop10$STATE,]
ggplot(reflong,
aes(y = Number,
axis1 = continent, axis2 = Country, axis3 = STATE,axis4=usregion)) +
geom_alluvium(aes(fill = continent),
width = 0, knot.pos = 0, reverse = FALSE) +
guides(fill = FALSE) +
geom_stratum(width = 1/8, reverse = FALSE) +
geom_text(stat = "stratum", infer.label = TRUE, reverse = FALSE) +
scale_x_continuous(breaks = 1:4, labels = c("Continent", "Country", "State","US Region"))
ggplot(reflongtop10states[reflongtop10states$Country %in% countrytop10$Country,],
aes(y = Number,
axis1 = continent, axis2 = Country, axis3 = STATE,axis4=usregion)) +
geom_alluvium(aes(fill = continent),
width = 0, knot.pos = 0, reverse = FALSE) +
guides(fill = FALSE) +
geom_stratum(width = 1/8, reverse = FALSE) +
geom_text(stat = "stratum", infer.label = TRUE, reverse = FALSE)+theme_minimal()+scale_x_continuous(breaks = 1:4, labels = c("Continent", "Country", "State","US Region")) + theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
# Chunk 7
#https://jokergoo.github.io/circlize_book/book/the-chorddiagram-function.html
top10statescountries=reflongtop10states[reflongtop10states$Country %in% countrytop10$Country,]
table(top10statescountries$usregion,top10statescountries$STATE)
table(top10statescountries$continent,top10statescountries$Country)
categorieslist=c(levels(as.factor(top10statescountries$usregion)),levels(as.factor(top10statescountries$continent)))
categorieslist=categorieslist[-c(1)]
grid.col = palette(RColorBrewer::brewer.pal(n = 7, name = "Set"))
grid.col=c(ARIZONA="red",CALIFORNIA="red",WASHINGTON="red",`NEW YORK`="green",PENNSYLVANIA="green",FLORIDA="blue",GEORGIA="blue",KENTUCKY="blue",`NORTH CAROLINA`="blue",TEXAS="blue",BHUTAN="#8dd3c7",BURMA="#ffffb3",IRAQ="#bebada",SYRIA="#fb8072",CUBA="#80b1d3",`DEM. REP. CONGO`="#fdb462",ERITREA="#b3de69",SOMALIA="#fccde5",SUDAN="#d9d9d9",UKRAINE="#bc80bd")
table(top10statescountries$Country,top10statescountries$continent)
circos.clear()
# chordDiagram(top10statescountries[,c("Country","STATE","Number")],
#              order=c("ARIZONA","CALIFORNIA","WASHINGTON","NEW YORK","PENNSYLVANIA","FLORIDA","GEORGIA","KENTUCKY","NORTH CAROLINA","TEXAS","BHUTAN","BURMA","IRAQ","SYRIA","CUBA","DEM. REP. CONGO","ERITREA","SOMALIA","SUDAN","UKRAINE"),
#              big.gap = 5,grid.col =grid.col,transparency = .1, annotationTrack = "grid")
chordDiagram(top10statescountries[,c("Country","STATE","Number")],big.gap = 5, grid.col = grid.col, transparency=.1,annotationTrack = "grid",
preAllocateTracks = list(track.height = max(strwidth(c("ARIZONA","CALIFORNIA","WASHINGTON","NEW YORK","PENNSYLVANIA","FLORIDA","GEORGIA","KENTUCKY","NORTH CAROLINA","TEXAS","BHUTAN","BURMA","IRAQ","SYRIA","CUBA","DEM. REP. CONGO","ERITREA","SOMALIA","SUDAN","UKRAINE")))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(-.15, .5))
}, bg.border = NA)
# Chunk 8
network <- graph_from_data_frame(top10statescountries[,c("Country","STATE")])
# plot it
plot(network,layout=layout.fruchterman.reingold)
# Chunk 9
links=top10statescountries[,c("Country","STATE","Number")]
countryonly=unique(top10statescountries$Country)
stateonly=unique(top10statescountries$STATE)
contionly=countrycode(countryonly, origin="country.name", destination="continent")
regiononly=as.character(usregions$Region[match(tolower(stateonly),tolower(usregions$State))])
table(reflong$usregion)
nodes=data.frame(name=c(countryonly,stateonly),
group=c(contionly,regiononly))
plot.new()
network <- graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
# Make a palette of 3 colors
colouring  <- RColorBrewer::brewer.pal(nlevels(as.factor(nodes$group)), "Set2")
# Create a vector of color
my_color <- colouring[as.numeric(as.factor(V(network)$group))]
# Make the plot
plot(network, vertex.color=my_color)
#,edge.width=E(network)$importance*2 )
# Add a legend
legend("topleft", legend=levels(as.factor(V(network)$group)), col = colouring , bty = "n", pch=20 , pt.cex = 3, cex = 1.5, text.col=colouring , ncol=2)
# Chunk 10
plot.new()
E(network)$width <- E(network)$Number/100
plot(network, vertex.color=my_color,edge.curved=.1)
legend("topleft", legend=levels(as.factor(V(network)$group)), col = colouring , bty = "n", pch=20 , pt.cex = 3, cex = 1.5, text.col=colouring , ncol=2)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( color="#69b3a2", size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=8, color="#69b3a2", nudge_y=-0.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( color="#69b3a2", size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="#69b3a2", nudge_y=-0.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
plot.new()
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( color="#69b3a2", size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="#69b3a2", nudge_y=-0.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( color=colouring, size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="#69b3a2", nudge_y=-0.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
plot.new()
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( color=colouring, size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="#69b3a2", nudge_y=-0.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( color="blue", size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="#69b3a2", nudge_y=-0.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( color="blue", size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="black", nudge_y=-0.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=my_color), size=3) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="black", nudge_y=-1.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=my_color), size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="black", nudge_y=-1.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=my_color), size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="black", nudge_y=-1.1) +
theme_void()
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="black", nudge_y=-1.1) +
theme_void() +
theme(
legend.position="none",
plot.margin=unit(rep(2,4), "cm")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="black", nudge_y=-1.1) +
theme_void()
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=2, color="black", nudge_y=-1.1) +
theme_void()
+
theme(
legend.position="top")
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text( aes(label=name), repel = FALSE, size=3, color="black", nudge_y=-1.1) +
theme_void()
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void()
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) +
theme_void() +  theme(legend.position="top")
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=2.3) +
theme_void() +  theme(legend.position="top")
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=2.3) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=2.3) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
)
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=2.3) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-5.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=2.3) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-3.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=2.3) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, edge_width=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, aes(edge_width=E(network)$Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, aes(edge_width=E(network)$Number/200)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, aes(edge_width=E(network)$Number/300)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, aes(edge_width=E(network)$Number/500)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.3, aes(edge_width=E(network)$Number)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",legend.title="",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",title="",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,aes(size=E(network)$Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",title="",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,aes(size=E(network)$Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",title="",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,aes(size=E(network)$Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,aes(size=E(network)$Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,aes(size=E(network)$Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,aes(size=Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,edge_size=Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,edge_size=Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")
))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,edge_size=Number/100) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.7,aes(width=Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2,aes(width=Number/100)) +
geom_node_point( aes(color=group), size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
geom_edge_arc(edge_colour="black", edge_alpha=0.2,aes(width=Number/100),show.legend = F) +
geom_edge_arc(edge_colour="black", edge_alpha=0.2,aes(width=Number/100),show.legend = F) +
))
ggraph(network, layout="linear") +
ggraph(network, layout="linear") +
geom_node_point( aes(color=group), aes(size=5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2,aes(width=Number/100),show.legend = F) +
geom_node_point( aes(color=group), aes(size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
```{r}
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2,aes(width=Number/100),show.legend = F) +
geom_node_point( aes(color=group), aes(size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
```
ggraph(network, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2,aes(width=Number/100),show.legend = F) +
geom_node_point( aes(color=group),size=5) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -.1, size=3.5) +
theme_void() +  theme(legend.position="top",plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) + expand_limits(x = c(-1, 1.5), y = c(-1.6, 1.2))  +guides(color=guide_legend(title=""))
library(networkD3)
p <- simpleNetwork(top10statescountries[,c("Country","STATE")], height="100px", width="100px")
p
p <- simpleNetwork(top10statescountries[,c("Country","STATE")], height="800px", width="1100px")
p
p <- simpleNetwork(top10statescountries[,c("Country","STATE")], height="800px", width="1100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 30,          # distance between node. Increase this value to have more space between nodes
charge = -900,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
p
p <- simpleNetwork(top10statescountries[,c("Country","STATE")], height="800px", width="1100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 100,          # distance between node. Increase this value to have more space between nodes
charge = -900,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
p
p <- forceNetwork(top10statescountries[,c("Country","STATE")], height="800px", width="1100px",
Source = 1,                 # column number of source
Target = 2,                 # column number of target
linkDistance = 100,          # distance between node. Increase this value to have more space between nodes
charge = -900,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 14,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#666",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#69b3a2",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.9,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T                    # Can you zoom on the figure?
)
karate=network
wc <- cluster_walktrap(karate)
members <- membership(wc)
# Convert to object suitable for networkD3
karate_d3 <- igraph_to_networkD3(karate, group = members)
# Create force directed network plot
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
# Create force directed network plot
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',height="800px", width="1100px")
# Create force directed network plot
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target', linkDistance = 100,
NodeID = 'name', Group = 'group',height="800px", width="1100px")
# Create force directed network plot
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target', linkDistance = 800,
NodeID = 'name', Group = 'group',height="800px", width="1100px")
# Create force directed network plot
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target', linkDistance = 400,
NodeID = 'name', Group = 'group',height="800px", width="1100px")
# Create force directed network plot
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target', linkDistance = 400,
NodeID = 'name', Group = 'group',height="800px", width="1100px",zoom=TRUE)
# Create force directed network plot
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target', linkDistance = 300,
NodeID = 'name', Group = 'group',height="800px", width="1100px",zoom=TRUE)
tinytex::install_tinytex()
devtools::install_github("patilv/gozagsdatavizsp20",auth_token="e6296e48019cc47a624bff2e9826d3a2dc0cde85",force = TRUE)
gozagsdatavizsp20::opendatavizhome()
gozagsdatavizsp20::opendatavizfolder()
devtools::install_github("patilv/gozagsdatavizsp20",auth_token="e6296e48019cc47a624bff2e9826d3a2dc0cde85",force = TRUE)
gozagsdatavizsp20::opendatavizhome()
gozagsdatavizsp20::opendatavizfolder()
library(tidyverse)
table1
library(tidyverse)
table1
table2
table3
table4a
table4b
table1 %>%
mutate(rate = cases / population * 10000)
mydf<-table1 %>%
mutate(rate = cases / population * 10000)
View(mydf)
library(nycflights13)
setwd("~/marketing research/Slides/TypesofGraphs")
